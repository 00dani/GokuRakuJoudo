;; edn spec https://github.com/edn-format/edn
{;;;; define things
 ;; define devices
 :devices {:hhkb-bt [{:vendor_id 1278 :product_id 51966}]
           :hhkb [{:vendor_id 2131 :product_id 256}]}

 ;; define application identifiers
 :applications {:chrom ["^com\\.google\\.Chrome$"]
                :chrom-canary [ "^com\\.google\\.Chrome\\.canary$"]
                :chroms ["^com\\.google\\.Chrome$" "^com\\.google\\.Chrome\\.canary$"]}

 :input_sources {:squirrel {:input_mode_id "com.googlecode.rimeime.inputmethod.Squirrel"
                            :input_source_id "com.googlecode.rimeime.inputmethod.Squirrel.Rime"
                            :language "zh-Hans"}
                 :us {:input_mode_id ""
                      :input_source_id "com.apple.keylayout.US"
                      :language "en"}}

 ;; define alias for modifers
 :modifiers {:11 [:left_command :left_control]
             :111 [:left_command :left_control :left_option]
             :1111 [:left_command :left_control :left_option :left_shift]
             :ccos [:left_command :left_control :left_option :left_shift]
             :11111 [:fn :left_command :left_control :left_option :left_shift]
             :spacebar-modifier {:mandatory [:left_command :left_control] :optional [:left_shift]}
             :fn&lcommand&lcontrol&loption&lshift [:fn :left_command :left_control :left_option :left_shift]}

 ;; define froms
 ;; use in <from>
 :froms {:1 {:key :d}
         :2 {:key :d :modi :1}
         :3 {:key :d :modi :left_command}
         :4 {:key :d :modi [:left_command :right_shift]}
         :5 {:key :d :modi {:mandatory [:left_command :right_shift]}}
         :6 {:key :d :modi {:mandatory [:left_command :right_shift]
                            :optional [:caps_lock]}}
         :7 {:ckey :display_brightness_decrement}
         :8 {:ckey :display_brightness_decrement :modi :left_command}
         :9 {:pkey :button4 :modi :left_command}
         :10 {:sim [:a :b] :modi :left_command}
         :11 {:sim [:a :b]
              :simo {:interrupt true
                     :dorder :insensitive}
              :modi :left_command}}

 ;; define tos
 ;; use in <to>
 :tos {:macos-defin {:key :d :modifiers [:left_command :left_control]}
       :alf--search-help "osascript -e 'tell application \"Alfred 3\" to run trigger \"helpSearch\" in workflow \"com.tedwise.menubarsearch\" with argument \"\"'"}

 ;;;; helper function to generate things little bit quicker
 ;; quick define "layers" or "state" feature(use set_variable)
 ;; can use as conditions in rule list
 ;; {:<layer name> {:from <froms>}}
 :layers {:chunkwm {:from :tab}} ;; key "d" to set_variable "vi-mode" 1, to_if_alone "d", to_after_key_up set_variable "vi-mode" 0
 :simlayers {:vi-mode {:key :d}}
 :simlayer-threshold 250

 ;; swap keys, only support single key, like the simple modifications functionality in karabiner gui
 ;; {<single key> <single key>}
 :swaps [{:a :b}] ;; swap a and b


 ;; fallback to raw defination
 ;; similar to karabiner.json, can use definations in :froms and :tos
 :raws [{:from :caps_lock :to :left_control :alone :escape}
        {:from :right_shift
         :to [:set {"right_shift pressed" 1} :right_shift]
         :to_delayed_action {:invoked {:set ["right_shift pressed" 0]}
                             :cancled {:set ["right_shift pressed" 0]}}}
        {:from [:f :j], :to :alf--search-help, :alone :escape}] ;; comma considered whitespace

 ;; rule list
 :rules
 ;; [<from> <to>] or
 ;; [<from> <to> <conditions>] or
 ;; [<from> <to> <conditions> <other options>]
 ;; <from> can be keywords defined in froms or keycodes without `{:not-from true}`
 ;; <to> can be keywords defined in tos, keycodes without `{:not-to true}`, string (shell script)
 ;; <conditions> can be keywords defined in layers, devices, applications
 ;; <other options> {:other {:parameters {:to_delayed_action_delay_milliseconds 100}} }
 [[:a :1] ;; a to 1
  [:Ca :$1] ;; command a to control 1
  [:my-spacebar :$1] ;; my-spacebar to control 1
  [:b [:1 :2]]  ;; key to key
  [:c "osascript -e 'display dialog \"example apple script\"'"] ;; key to shell script
  [:d [:1 "osascript -e 'display dialog \"example apple script\"'"]] ;; key to key then shell script
  [[:e :f] :3] ;; simultaneous key to key
  [:g :4 :vi-mode] ;; vi-mode is 1
  [:h :5 :!vi-mode] ;; vi-mode is 0
  [:i :6 :hhkb-bt] ;; key to key in layer b (in layer a) specific to hhkb-bt device
  [:j :7 [:vi-mode :hhkb-bt]] ;; multiple condition
  [:h [:8 {:set ["some-mode" 0]}]]] ;; h to 8 and set_variable
 :cheatsheet {:Ca "command a" ;; mandatory left_command, optional any
              :Ta "control a" ;; mandatory left_control, optional any
              :Oa "option a"
              :Sa "shift a"
              :#Sa "shift a" ;; keycode a, optional left_shift
              :CTOa "command control option a"
              :Cspacebar "command space"
              :Fa "fn a"}}